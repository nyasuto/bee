name: 🔒 Security & Dependencies

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎日午前4時（UTC）にセキュリティスキャン実行
    - cron: '0 4 * * *'
    # 毎週月曜日に依存関係更新チェック
    - cron: '0 6 * * 1'

env:
  GO_VERSION: '1.21'

jobs:
  # ===== セキュリティ脆弱性スキャン =====
  security-scan:
    name: 🛡️ Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-security-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-security-
          
    - name: 🔧 Install security tools
      run: |
        # Gosec - Go security checker
        go install github.com/securecodewarrior/github-action-gosec@latest
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s latest
        
        # Nancy - vulnerability scanner for dependencies
        go install github.com/sonatypecom/nancy@latest
        
    - name: 🔍 Run Gosec security scan
      run: |
        echo "## 🛡️ Security Scan Results" > security_report.md
        echo "" >> security_report.md
        echo "### 🔍 Gosec Analysis" >> security_report.md
        echo "\`\`\`" >> security_report.md
        
        # Gosec実行（結果をファイルにも保存）
        ./bin/gosec -fmt json -out gosec-report.json ./... 2>/dev/null || true
        ./bin/gosec ./... 2>&1 | tee -a security_report.md || true
        
        echo "\`\`\`" >> security_report.md
        
        # JSON結果の解析
        if [ -f "gosec-report.json" ]; then
          ISSUES=$(cat gosec-report.json | grep -o '"Issues":\[.*\]' | wc -l)
          echo "" >> security_report.md
          echo "**Summary**: $ISSUES security issues detected" >> security_report.md
        fi
        
    - name: 🔒 Check for hardcoded secrets
      run: |
        echo "" >> security_report.md
        echo "### 🔒 Secret Detection" >> security_report.md
        
        # 簡単なシークレット検出パターン
        SECRET_PATTERNS=(
          "password\s*=\s*['\"][^'\"]{8,}['\"]"
          "api[_-]?key\s*=\s*['\"][^'\"]{20,}['\"]"
          "secret\s*=\s*['\"][^'\"]{16,}['\"]"
          "token\s*=\s*['\"][^'\"]{20,}['\"]"
          "BEGIN RSA PRIVATE KEY"
          "BEGIN PRIVATE KEY"
          "BEGIN OPENSSH PRIVATE KEY"
        )
        
        SECRETS_FOUND=0
        for pattern in "${SECRET_PATTERNS[@]}"; do
          MATCHES=$(grep -r -i -E "$pattern" . --exclude-dir=.git --exclude-dir=vendor --exclude="*.md" || true)
          if [ -n "$MATCHES" ]; then
            echo "⚠️ Potential secret found: $pattern" >> security_report.md
            echo "$MATCHES" >> security_report.md
            SECRETS_FOUND=$((SECRETS_FOUND + 1))
          fi
        done
        
        if [ $SECRETS_FOUND -eq 0 ]; then
          echo "✅ No hardcoded secrets detected" >> security_report.md
        else
          echo "❌ $SECRETS_FOUND potential secrets found" >> security_report.md
        fi
        
    - name: 🌐 Check for unsafe network calls
      run: |
        echo "" >> security_report.md
        echo "### 🌐 Network Security Analysis" >> security_report.md
        
        # 安全でないネットワーク呼び出しをチェック
        UNSAFE_CALLS=$(grep -r -E "(http://|InsecureSkipVerify.*true|TLSClientConfig.*InsecureSkipVerify)" . --include="*.go" || true)
        
        if [ -n "$UNSAFE_CALLS" ]; then
          echo "⚠️ Potentially unsafe network calls detected:" >> security_report.md
          echo "\`\`\`" >> security_report.md
          echo "$UNSAFE_CALLS" >> security_report.md
          echo "\`\`\`" >> security_report.md
        else
          echo "✅ No unsafe network calls detected" >> security_report.md
        fi
        
    - name: 📤 Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-report
        path: |
          security_report.md
          gosec-report.json
        retention-days: 30

  # ===== 依存関係脆弱性チェック =====
  dependency-scan:
    name: 📦 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 🔧 Install dependency scan tools
      run: |
        # Go vulnerability checker
        go install golang.org/x/vuln/cmd/govulncheck@latest
        
        # Nancy for additional vulnerability checking
        go install github.com/sonatypecom/nancy@latest || echo "Nancy installation failed, continuing..."
        
    - name: 🔍 Run Go vulnerability check
      run: |
        echo "## 📦 Dependency Security Report" > dependency_report.md
        echo "" >> dependency_report.md
        echo "### 🔍 Go Vulnerability Check" >> dependency_report.md
        echo "\`\`\`" >> dependency_report.md
        
        # govulncheck実行
        govulncheck ./... 2>&1 | tee -a dependency_report.md || true
        
        echo "\`\`\`" >> dependency_report.md
        
    - name: 📋 Analyze dependencies
      run: |
        echo "" >> dependency_report.md
        echo "### 📋 Dependency Analysis" >> dependency_report.md
        
        # 直接依存関係の表示
        echo "#### Direct Dependencies:" >> dependency_report.md
        echo "\`\`\`" >> dependency_report.md
        go list -m all | head -20 >> dependency_report.md
        echo "\`\`\`" >> dependency_report.md
        
        # 依存関係の統計
        TOTAL_DEPS=$(go list -m all | wc -l)
        DIRECT_DEPS=$(grep -c "require" go.mod 2>/dev/null || echo "0")
        
        echo "" >> dependency_report.md
        echo "#### Statistics:" >> dependency_report.md
        echo "- **Total dependencies**: $TOTAL_DEPS" >> dependency_report.md
        echo "- **Direct dependencies**: $DIRECT_DEPS" >> dependency_report.md
        
        # 古い依存関係をチェック
        echo "" >> dependency_report.md
        echo "#### Outdated Dependencies Check:" >> dependency_report.md
        echo "\`\`\`" >> dependency_report.md
        go list -u -m all 2>&1 | grep -E "\[.*\]" | head -10 >> dependency_report.md || echo "No outdated dependencies detected" >> dependency_report.md
        echo "\`\`\`" >> dependency_report.md
        
    - name: 🔒 Check for known vulnerable packages
      run: |
        echo "" >> dependency_report.md
        echo "### 🚨 Known Vulnerable Packages" >> dependency_report.md
        
        # 既知の脆弱なパッケージリスト（例）
        VULNERABLE_PACKAGES=(
          "github.com/gin-gonic/gin@v1.6.0"
          "github.com/gorilla/websocket@v1.4.0"
          "gopkg.in/yaml.v2@v2.2.2"
        )
        
        VULNERABILITIES_FOUND=0
        for pkg in "${VULNERABLE_PACKAGES[@]}"; do
          if go list -m all | grep -q "$(echo $pkg | cut -d'@' -f1)"; then
            CURRENT_VERSION=$(go list -m all | grep "$(echo $pkg | cut -d'@' -f1)" | awk '{print $2}')
            echo "⚠️ Package $(echo $pkg | cut -d'@' -f1) found (version: $CURRENT_VERSION)" >> dependency_report.md
            VULNERABILITIES_FOUND=$((VULNERABILITIES_FOUND + 1))
          fi
        done
        
        if [ $VULNERABILITIES_FOUND -eq 0 ]; then
          echo "✅ No known vulnerable packages detected" >> dependency_report.md
        else
          echo "❌ $VULNERABILITIES_FOUND potentially vulnerable packages found" >> dependency_report.md
        fi
        
    - name: 📤 Upload dependency report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-report
        path: dependency_report.md
        retention-days: 30

  # ===== ライセンス適合性チェック =====
  license-compliance:
    name: ⚖️ License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 🔧 Install license checking tools
      run: |
        # Go-licenses for license detection
        go install github.com/google/go-licenses@latest || echo "go-licenses installation failed"
        
    - name: ⚖️ Analyze licenses
      run: |
        echo "## ⚖️ License Compliance Report" > license_report.md
        echo "" >> license_report.md
        echo "### 📋 Project License" >> license_report.md
        
        # プロジェクトのライセンス確認
        if [ -f "LICENSE" ]; then
          echo "✅ Project license file found:" >> license_report.md
          echo "\`\`\`" >> license_report.md
          head -5 LICENSE >> license_report.md
          echo "\`\`\`" >> license_report.md
        else
          echo "⚠️ No LICENSE file found in project root" >> license_report.md
        fi
        
        echo "" >> license_report.md
        echo "### 📦 Dependency Licenses" >> license_report.md
        
        # 依存関係のライセンス（go-licensesが利用可能な場合）
        if command -v go-licenses >/dev/null 2>&1; then
          echo "\`\`\`" >> license_report.md
          go-licenses report . 2>&1 | head -20 >> license_report.md || echo "License detection failed" >> license_report.md
          echo "\`\`\`" >> license_report.md
        else
          echo "License scanning tool not available" >> license_report.md
        fi
        
        # 互換性のないライセンスをチェック
        echo "" >> license_report.md
        echo "### ⚠️ License Compatibility Check" >> license_report.md
        
        INCOMPATIBLE_LICENSES=(
          "GPL-3.0"
          "AGPL-3.0"
          "SSPL-1.0"
        )
        
        ISSUES_FOUND=0
        for license in "${INCOMPATIBLE_LICENSES[@]}"; do
          if go-licenses report . 2>/dev/null | grep -q "$license"; then
            echo "❌ Potentially incompatible license found: $license" >> license_report.md
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          fi
        done
        
        if [ $ISSUES_FOUND -eq 0 ]; then
          echo "✅ No license compatibility issues detected" >> license_report.md
        else
          echo "⚠️ $ISSUES_FOUND potential license compatibility issues" >> license_report.md
        fi
        
    - name: 📤 Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-compliance-report
        path: license_report.md
        retention-days: 30

  # ===== 依存関係更新提案 =====
  dependency-update:
    name: 🔄 Dependency Update Recommendations
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 6 * * 1'  # 毎週月曜日のみ実行
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 🔍 Check for updates
      run: |
        echo "## 🔄 Dependency Update Recommendations" > update_recommendations.md
        echo "" >> update_recommendations.md
        echo "### 📦 Available Updates" >> update_recommendations.md
        echo "\`\`\`" >> update_recommendations.md
        
        # 更新可能な依存関係をチェック
        go list -u -m all | grep -E "\[.*\]" >> update_recommendations.md || echo "All dependencies are up to date" >> update_recommendations.md
        
        echo "\`\`\`" >> update_recommendations.md
        
        # セキュリティ更新を特に注意
        echo "" >> update_recommendations.md
        echo "### 🚨 Security Updates" >> update_recommendations.md
        echo "Please prioritize these updates if they contain security fixes:" >> update_recommendations.md
        
        # go.mod で pinned されているバージョンをチェック
        if [ -f "go.mod" ]; then
          PINNED_VERSIONS=$(grep -E "v[0-9]+\.[0-9]+\.[0-9]+" go.mod | wc -l)
          echo "" >> update_recommendations.md
          echo "### 📌 Pinned Versions" >> update_recommendations.md
          echo "- **Pinned dependencies**: $PINNED_VERSIONS" >> update_recommendations.md
        fi
        
        echo "" >> update_recommendations.md
        echo "### 🎯 Update Strategy" >> update_recommendations.md
        echo "1. **Major version updates**: Review breaking changes carefully" >> update_recommendations.md
        echo "2. **Security patches**: Apply immediately" >> update_recommendations.md
        echo "3. **Minor updates**: Test in development environment first" >> update_recommendations.md
        echo "4. **AI/ML libraries**: Verify compatibility with learning objectives" >> update_recommendations.md
        
    - name: 📤 Upload update recommendations
      uses: actions/upload-artifact@v3
      with:
        name: dependency-update-recommendations
        path: update_recommendations.md
        retention-days: 30

  # ===== セキュリティレポート統合 =====
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-scan, license-compliance, dependency-update]
    if: always()
    
    steps:
    - name: 📊 Generate Security Summary
      run: |
        echo "# 🔒 Security & Dependency Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **License Compliance**: ${{ needs.license-compliance.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependency Updates**: ${{ needs.dependency-update.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # セキュリティ状態の総合評価
        if [ "${{ needs.security-scan.result }}" = "success" ] && [ "${{ needs.dependency-scan.result }}" = "success" ] && [ "${{ needs.license-compliance.result }}" = "success" ]; then
          echo "## ✅ Overall Security Status: SECURE" >> $GITHUB_STEP_SUMMARY
          echo "All security checks passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Overall Security Status: ATTENTION REQUIRED" >> $GITHUB_STEP_SUMMARY
          echo "Some security issues detected. Please review the detailed reports." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🛡️ Security Best Practices" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Regular vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependency update monitoring" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ License compliance checking" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Secret detection and prevention" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📁 Available Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Security vulnerability scan results" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency analysis and recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- License compliance verification" >> $GITHUB_STEP_SUMMARY
        echo "- Weekly dependency update suggestions" >> $GITHUB_STEP_SUMMARY