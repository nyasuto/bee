# ARM64 optimized development image for Apple Silicon Macs
FROM --platform=linux/arm64 mcr.microsoft.com/vscode/devcontainers/base:bullseye AS base

# Install system dependencies for neural network development (ARM64 optimized)
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install --no-install-recommends \
        build-essential \
        pkg-config \
        libopenblas-dev \
        liblapack-dev \
        libomp-dev \
        libfftw3-dev \
        python3 \
        python3-pip \
        python3-venv \
        python3-dev \
        nodejs \
        npm \
        curl \
        wget \
        git \
        htop \
        vim \
        jq \
        tree \
        unzip \
        && apt-get autoremove -y && apt-get clean -y

# Development stage (ARM64 specific)
FROM base AS development

# Install minimal Python packages for ARM64 compatibility
# Note: TensorFlow is not reliably available for linux/arm64
RUN python3 -m pip install --upgrade pip \
    && pip3 install --no-cache-dir \
        numpy==1.24.3 \
        scipy==1.11.1 \
        matplotlib==3.7.2 \
        jupyter==1.0.0 \
        pandas==2.0.3 \
        scikit-learn==1.3.0 \
        memory-profiler==0.60.0 \
        psutil==5.9.5

# Install PyTorch CPU-only for ARM64 (most reliable option)
RUN pip3 install --no-cache-dir \
    torch==2.1.0 torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

# Note: TensorFlow skipped for ARM64 Linux compatibility
# Users should install TensorFlow on host macOS if needed for comparison

# Install minimal Node.js tools
RUN npm install -g http-server

# Setup cache directories
RUN mkdir -p /home/vscode/.cache/go-build \
    && mkdir -p /home/vscode/go/pkg/mod \
    && chown -R vscode:vscode /home/vscode/.cache \
    && chown -R vscode:vscode /home/vscode/go

# Switch to vscode user
USER vscode

# Setup bash aliases for ARM64 environment
RUN echo 'alias ll="ls -la"' >> ~/.bashrc \
    && echo 'alias cc="claude-code"' >> ~/.bashrc \
    && echo 'alias bee="go run ./cmd/bee"' >> ~/.bashrc \
    && echo 'alias make-help="make help"' >> ~/.bashrc \
    && echo 'alias python="python3"' >> ~/.bashrc \
    && echo 'alias pip="pip3"' >> ~/.bashrc

# Add ARM64 environment info
RUN echo 'echo "🍎 ARM64 Development Environment Active"' >> ~/.bashrc \
    && echo 'echo "📝 TensorFlow: Use host macOS for ML comparisons"' >> ~/.bashrc \
    && echo 'echo "🚀 PyTorch CPU: Available in container"' >> ~/.bashrc

# Production stage (minimal runtime)
FROM --platform=linux/arm64 golang:1.21-bullseye AS production

WORKDIR /app

# Copy Go module files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the application for ARM64
RUN CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o bin/bee ./cmd/bee

# Expose default port
EXPOSE 8080

# Run the application
CMD ["./bin/bee", "serve"]